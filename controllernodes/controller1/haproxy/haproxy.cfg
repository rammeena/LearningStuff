
#---------------------------------------------------------------------
# Global settings: This section allows us to specify global settings for HAProxy 
#---------------------------------------------------------------------
global
    # Logging to syslog facility local0
    log         127.0.0.1 local0
    log         127.0.0.1 local1 notice
    
    # Configure chrooted environment toincreases the security level in case an unknown
    # vulnerability would be exploited, since it would make it very hard for the attacker to exploit the system.
    chroot      /var/lib/haproxy

    # for restarts
    pidfile     /var/run/haproxy.pid
 
    # maximum number of simultaneous active connections,haproxy's per-process max number of concurrent connections.
    # By Default haproxy runs single process only
    maxconn     50000

    # run in the background as haproxy user and group
    user        haproxy
    group       haproxy
    daemon

    #Uncomment this parameter 'debug' to turn on verbose logging
    #debug

    # turn on stats unix socket, Creates a UNIX socket in stream mode.
    stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# Settings in the defaults section apply to all services, 
# these parameters are common defaults that all the 'listen' and 'backend' 
# sections will  use if not designated in their block
#---------------------------------------------------------------------
defaults
    # apply log settings from the global section above to services
    log                     global

    # Proxy incoming traffic as HTTP requests. Setting up global working mode as 'http' rather 'tcp'
    # If you want to override this then write 'mode' in specific section
    mode                    http 

    # Unfortunately, per the haproxy docs, connection-based load balancing is
    # not a good strategy for HTTP, so use roundrobin

    balance		    roundrobin
    
    # Log details about HTTP requests.this enables logging of HTTP request, session state and timers.
    option                  httplog

    # disable logging of null connections as these can pollute the logs.
    # This option indicates that a connection on which no data has been transferred will not be logged
    option                  dontlognull

    # By default, when a client communicates with a server, 
    # HAProxy will only analyze, log, and process the first request of each connection.
    # If option httpclose is set, it will check if 
    # a “Connection: close” header is already set in each direction, and will add one if missing.
    # This helps to close the TCP connection after each transfer

    # option httpclose
    
    # HTTP header “X-Forwarded-For” will be added by HAProxy to all requests sent to the server.
    # This header contains a value representing the client’s source IP address.
    option forwardfor       except 127.0.0.0/8

    # Enable or disable HTTP connection closing on the server side. 
    option http-server-close 

    #Define whether haproxy will announce keepalive to the server or not
    option http-pretend-keepalive
 
    # The option redispatch enables session redistribution in case of connection failures. 
    # Do not enforce session affinity (i.e., an HTTP session can be served by any Mongrel,
    # not just the one that started the session.
    # So session stickness is overriden if a web server instance goes down.
    option                  redispatch

    # If sending a request to one server fails, try to send it to another, 3 times
    # before aborting the request
    retries                 2 
   
    # Keep timeouts at web speed, since this balancer sits in front of everything
    # Backends will force timeout faster if needed.
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s

    # Amount of time after which a health check is considered to have timed out
    timeout check           5s
    
    # By default, HAProxy logs only health checks triggering a state change from UP to DOWN.
    # It is possible to log any change of the check status or the server’s health by enabling
    #  the directive option log-health-checks in the backend or defaults sections.
    option log-health-checks

    # maximum number of simultaneous active connections from an upstream web server per service
    maxconn                 5000

#---------------------------------------------------------------------
# 'listen' section to enable haproxy stats 
#---------------------------------------------------------------------
listen stats 192.168.0.114:51051      #Listen on VIP on port 51051 
    mode http
    balance source
    #This is the virtual URL to access the stats page
    stats uri /haproxy_stats
    #Authentication realm. This can be set to anything. Escape space characters with a backslash.
    stats realm HAProxy\ Statistics
    #The user/pass you want to use. Change this password!
    stats auth admin:123
    #This allows you to take down and bring up back end servers.
    #This will produce an error on older versions of HAProxy.
    stats admin if TRUE


# MariaDB Galera Cluster
listen galera_cluster
  bind 192.168.0.114:3306
  mode tcp
  balance source
  option tcpka
  option  httpchk
  option  tcplog
  server controller1 192.168.122.181:3306 check port 9200 inter 2000 rise 2 fall 3
  server controller2 192.168.122.182:3306 check port 9200 inter 2000 rise 2 fall 3
  server controller3 192.168.122.183:3306 check port 9200 inter 2000 rise 2 fall 3

# Keystone Admin API HAProxy Configuration

listen keystone_admin_cluster
  bind 192.168.0.114:35357
  balance source
  option  tcpka
  option  httpchk
  option  tcplog
  server controller1 172.16.1.2:35357 check inter 2000 rise 2 fall 3
  server controller2 172.16.1.3:35357 check inter 2000 rise 2 fall 3
  server controller3 172.16.1.4:35357 check inter 2000 rise 2 fall 3

#Keystone Public API HAProxy Configuration

listen keystone_public_internal_cluster
  bind 192.168.0.114:5000
  balance source
  option  tcpka
  option  httpchk
  option  tcplog
  server controller1 172.16.1.2:5000 check inter 2000 rise 2 fall 3
  server controller2 172.16.1.3:5000 check inter 2000 rise 2 fall 3
  server controller3 172.16.1.4:5000 check inter 2000 rise 2 fall 3
